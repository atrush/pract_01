// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atrush/pract_01.git/internal/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockURLShortener is a mock of URLShortener interface.
type MockURLShortener struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerMockRecorder
}

// MockURLShortenerMockRecorder is the mock recorder for MockURLShortener.
type MockURLShortenerMockRecorder struct {
	mock *MockURLShortener
}

// NewMockURLShortener creates a new mock instance.
func NewMockURLShortener(ctrl *gomock.Controller) *MockURLShortener {
	mock := &MockURLShortener{ctrl: ctrl}
	mock.recorder = &MockURLShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLShortener) EXPECT() *MockURLShortenerMockRecorder {
	return m.recorder
}

// DeleteURLList mocks base method.
func (m *MockURLShortener) DeleteURLList(userID uuid.UUID, shortIDList ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{userID}
	for _, a := range shortIDList {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteURLList", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURLList indicates an expected call of DeleteURLList.
func (mr *MockURLShortenerMockRecorder) DeleteURLList(userID interface{}, shortIDList ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userID}, shortIDList...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURLList", reflect.TypeOf((*MockURLShortener)(nil).DeleteURLList), varargs...)
}

// GetCount mocks base method.
func (m *MockURLShortener) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockURLShortenerMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockURLShortener)(nil).GetCount))
}

// GetURL mocks base method.
func (m *MockURLShortener) GetURL(ctx context.Context, shortID string) (model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", ctx, shortID)
	ret0, _ := ret[0].(model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL.
func (mr *MockURLShortenerMockRecorder) GetURL(ctx, shortID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockURLShortener)(nil).GetURL), ctx, shortID)
}

// GetUserURLList mocks base method.
func (m *MockURLShortener) GetUserURLList(ctx context.Context, userID uuid.UUID) ([]model.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLList", ctx, userID)
	ret0, _ := ret[0].([]model.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLList indicates an expected call of GetUserURLList.
func (mr *MockURLShortenerMockRecorder) GetUserURLList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLList", reflect.TypeOf((*MockURLShortener)(nil).GetUserURLList), ctx, userID)
}

// Ping mocks base method.
func (m *MockURLShortener) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockURLShortenerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockURLShortener)(nil).Ping), ctx)
}

// SaveURL mocks base method.
func (m *MockURLShortener) SaveURL(ctx context.Context, srcURL string, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", ctx, srcURL, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockURLShortenerMockRecorder) SaveURL(ctx, srcURL, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockURLShortener)(nil).SaveURL), ctx, srcURL, userID)
}

// SaveURLList mocks base method.
func (m *MockURLShortener) SaveURLList(srcArr map[string]string, userID uuid.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURLList", srcArr, userID)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveURLList indicates an expected call of SaveURLList.
func (mr *MockURLShortenerMockRecorder) SaveURLList(srcArr, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURLList", reflect.TypeOf((*MockURLShortener)(nil).SaveURLList), srcArr, userID)
}

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserManager) AddUser(ctx context.Context) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserManagerMockRecorder) AddUser(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserManager)(nil).AddUser), ctx)
}

// Exist mocks base method.
func (m *MockUserManager) Exist(ctx context.Context, id uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exist", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exist indicates an expected call of Exist.
func (mr *MockUserManagerMockRecorder) Exist(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exist", reflect.TypeOf((*MockUserManager)(nil).Exist), ctx, id)
}

// GetCount mocks base method.
func (m *MockUserManager) GetCount() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCount")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCount indicates an expected call of GetCount.
func (mr *MockUserManagerMockRecorder) GetCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCount", reflect.TypeOf((*MockUserManager)(nil).GetCount))
}
